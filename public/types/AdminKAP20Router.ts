/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AdminKAP20RouterInterface extends utils.Interface {
  functions: {
    "KKUB()": FunctionFragment;
    "KYC()": FunctionFragment;
    "PROJECT()": FunctionFragment;
    "addAddress(address)": FunctionFragment;
    "adminProjectRouter()": FunctionFragment;
    "allowedAddrByIndex(uint256)": FunctionFragment;
    "allowedAddrByPage(uint256,uint256)": FunctionFragment;
    "allowedAddrLength()": FunctionFragment;
    "bitkubNextLevel()": FunctionFragment;
    "burnKToken(address,address,uint256)": FunctionFragment;
    "committee()": FunctionFragment;
    "externalTransfer(address,address,address,address,uint256,uint256)": FunctionFragment;
    "externalTransferKKUB(address,address,address,uint256,uint256)": FunctionFragment;
    "externalTransferKKUBToKUB(address,address,address,uint256,uint256)": FunctionFragment;
    "feeTo()": FunctionFragment;
    "internalTransfer(address,address,address,address,uint256,uint256)": FunctionFragment;
    "internalTransferKKUB(address,address,address,uint256,uint256)": FunctionFragment;
    "isAllowedAddr(address)": FunctionFragment;
    "mintKToken(address,address,uint256)": FunctionFragment;
    "revokeAddress(address)": FunctionFragment;
    "setAdminProjectRouter(address)": FunctionFragment;
    "setBitkubNextLevel(uint256)": FunctionFragment;
    "setCommittee(address)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setKKUB(address)": FunctionFragment;
    "setKYC(address)": FunctionFragment;
    "setKYCKKUB(address)": FunctionFragment;
    "setKYCsLevelKKUB(uint256)": FunctionFragment;
    "withdrawKUB(address,uint256)": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "KKUB"
      | "KYC"
      | "PROJECT"
      | "addAddress"
      | "adminProjectRouter"
      | "allowedAddrByIndex"
      | "allowedAddrByPage"
      | "allowedAddrLength"
      | "bitkubNextLevel"
      | "burnKToken"
      | "committee"
      | "externalTransfer"
      | "externalTransferKKUB"
      | "externalTransferKKUBToKUB"
      | "feeTo"
      | "internalTransfer"
      | "internalTransferKKUB"
      | "isAllowedAddr"
      | "mintKToken"
      | "revokeAddress"
      | "setAdminProjectRouter"
      | "setBitkubNextLevel"
      | "setCommittee"
      | "setFeeTo"
      | "setKKUB"
      | "setKYC"
      | "setKYCKKUB"
      | "setKYCsLevelKKUB"
      | "withdrawKUB"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "KKUB", values?: undefined): string;
  encodeFunctionData(functionFragment: "KYC", values?: undefined): string;
  encodeFunctionData(functionFragment: "PROJECT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminProjectRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAddrByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAddrByPage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAddrLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bitkubNextLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnKToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "committee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "externalTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "externalTransferKKUB",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "externalTransferKKUBToKUB",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "internalTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "internalTransferKKUB",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedAddr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintKToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminProjectRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBitkubNextLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommittee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKKUB",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKYC",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKYCKKUB",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKYCsLevelKKUB",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawKUB",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "KKUB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KYC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PROJECT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminProjectRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedAddrByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedAddrByPage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedAddrLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bitkubNextLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnKToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "committee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "externalTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalTransferKKUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalTransferKKUBToKUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "internalTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "internalTransferKKUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintKToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminProjectRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBitkubNextLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommittee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKKUB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKYC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKYCKKUB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKYCsLevelKKUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawKUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "AdminProjectRouterSet(address,address,address)": EventFragment;
    "ExternalTokenTransfer(address,address,address,uint256)": EventFragment;
    "FeeTransfer(address,address,address,uint256)": EventFragment;
    "InternalTokenTransfer(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminProjectRouterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExternalTokenTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InternalTokenTransfer"): EventFragment;
}

export interface AdminProjectRouterSetEventObject {
  oldAdmin: string;
  newAdmin: string;
  caller: string;
}
export type AdminProjectRouterSetEvent = TypedEvent<
  [string, string, string],
  AdminProjectRouterSetEventObject
>;

export type AdminProjectRouterSetEventFilter =
  TypedEventFilter<AdminProjectRouterSetEvent>;

export interface ExternalTokenTransferEventObject {
  _token: string;
  _from: string;
  _to: string;
  _amount: BigNumber;
}
export type ExternalTokenTransferEvent = TypedEvent<
  [string, string, string, BigNumber],
  ExternalTokenTransferEventObject
>;

export type ExternalTokenTransferEventFilter =
  TypedEventFilter<ExternalTokenTransferEvent>;

export interface FeeTransferEventObject {
  _token: string;
  _from: string;
  _to: string;
  _amount: BigNumber;
}
export type FeeTransferEvent = TypedEvent<
  [string, string, string, BigNumber],
  FeeTransferEventObject
>;

export type FeeTransferEventFilter = TypedEventFilter<FeeTransferEvent>;

export interface InternalTokenTransferEventObject {
  _token: string;
  _from: string;
  _to: string;
  _amount: BigNumber;
}
export type InternalTokenTransferEvent = TypedEvent<
  [string, string, string, BigNumber],
  InternalTokenTransferEventObject
>;

export type InternalTokenTransferEventFilter =
  TypedEventFilter<InternalTokenTransferEvent>;

export interface AdminKAP20Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AdminKAP20RouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    KKUB(overrides?: CallOverrides): Promise<[string]>;

    KYC(overrides?: CallOverrides): Promise<[string]>;

    PROJECT(overrides?: CallOverrides): Promise<[string]>;

    addAddress(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adminProjectRouter(overrides?: CallOverrides): Promise<[string]>;

    allowedAddrByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowedAddrByPage(
      _page: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    allowedAddrLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    bitkubNextLevel(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnKToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    committee(overrides?: CallOverrides): Promise<[string]>;

    externalTransfer(
      _token: PromiseOrValue<string>,
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    externalTransferKKUB(
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    externalTransferKKUBToKUB(
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    internalTransfer(
      _token: PromiseOrValue<string>,
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    internalTransferKKUB(
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAllowedAddr(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintKToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeAddress(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdminProjectRouter(
      _adminProjectRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBitkubNextLevel(
      _bitkubNextLevel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCommittee(
      _committee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeTo(
      _feeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKKUB(
      _KKUB: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKYC(
      _KYC: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKYCKKUB(
      _kyc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKYCsLevelKKUB(
      _kycsLevel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawKUB(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  KKUB(overrides?: CallOverrides): Promise<string>;

  KYC(overrides?: CallOverrides): Promise<string>;

  PROJECT(overrides?: CallOverrides): Promise<string>;

  addAddress(
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adminProjectRouter(overrides?: CallOverrides): Promise<string>;

  allowedAddrByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allowedAddrByPage(
    _page: PromiseOrValue<BigNumberish>,
    _limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  allowedAddrLength(overrides?: CallOverrides): Promise<BigNumber>;

  bitkubNextLevel(overrides?: CallOverrides): Promise<BigNumber>;

  burnKToken(
    _token: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  committee(overrides?: CallOverrides): Promise<string>;

  externalTransfer(
    _token: PromiseOrValue<string>,
    _feeToken: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _feeValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  externalTransferKKUB(
    _feeToken: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _feeValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  externalTransferKKUBToKUB(
    _feeToken: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _feeValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  internalTransfer(
    _token: PromiseOrValue<string>,
    _feeToken: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _feeValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  internalTransferKKUB(
    _feeToken: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _feeValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAllowedAddr(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintKToken(
    _token: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeAddress(
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdminProjectRouter(
    _adminProjectRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBitkubNextLevel(
    _bitkubNextLevel: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCommittee(
    _committee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeTo(
    _feeTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKKUB(
    _KKUB: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKYC(
    _KYC: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKYCKKUB(
    _kyc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKYCsLevelKKUB(
    _kycsLevel: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawKUB(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    KKUB(overrides?: CallOverrides): Promise<string>;

    KYC(overrides?: CallOverrides): Promise<string>;

    PROJECT(overrides?: CallOverrides): Promise<string>;

    addAddress(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    adminProjectRouter(overrides?: CallOverrides): Promise<string>;

    allowedAddrByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allowedAddrByPage(
      _page: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    allowedAddrLength(overrides?: CallOverrides): Promise<BigNumber>;

    bitkubNextLevel(overrides?: CallOverrides): Promise<BigNumber>;

    burnKToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    committee(overrides?: CallOverrides): Promise<string>;

    externalTransfer(
      _token: PromiseOrValue<string>,
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    externalTransferKKUB(
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    externalTransferKKUBToKUB(
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    internalTransfer(
      _token: PromiseOrValue<string>,
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    internalTransferKKUB(
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllowedAddr(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintKToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeAddress(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdminProjectRouter(
      _adminProjectRouter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBitkubNextLevel(
      _bitkubNextLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommittee(
      _committee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeTo(
      _feeTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKKUB(
      _KKUB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKYC(
      _KYC: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKYCKKUB(
      _kyc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKYCsLevelKKUB(
      _kycsLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawKUB(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AdminProjectRouterSet(address,address,address)"(
      oldAdmin?: PromiseOrValue<string> | null,
      newAdmin?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): AdminProjectRouterSetEventFilter;
    AdminProjectRouterSet(
      oldAdmin?: PromiseOrValue<string> | null,
      newAdmin?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): AdminProjectRouterSetEventFilter;

    "ExternalTokenTransfer(address,address,address,uint256)"(
      _token?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _amount?: null
    ): ExternalTokenTransferEventFilter;
    ExternalTokenTransfer(
      _token?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _amount?: null
    ): ExternalTokenTransferEventFilter;

    "FeeTransfer(address,address,address,uint256)"(
      _token?: PromiseOrValue<string> | null,
      _from?: null,
      _to?: PromiseOrValue<string> | null,
      _amount?: null
    ): FeeTransferEventFilter;
    FeeTransfer(
      _token?: PromiseOrValue<string> | null,
      _from?: null,
      _to?: PromiseOrValue<string> | null,
      _amount?: null
    ): FeeTransferEventFilter;

    "InternalTokenTransfer(address,address,address,uint256)"(
      _token?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _amount?: null
    ): InternalTokenTransferEventFilter;
    InternalTokenTransfer(
      _token?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _amount?: null
    ): InternalTokenTransferEventFilter;
  };

  estimateGas: {
    KKUB(overrides?: CallOverrides): Promise<BigNumber>;

    KYC(overrides?: CallOverrides): Promise<BigNumber>;

    PROJECT(overrides?: CallOverrides): Promise<BigNumber>;

    addAddress(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adminProjectRouter(overrides?: CallOverrides): Promise<BigNumber>;

    allowedAddrByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedAddrByPage(
      _page: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedAddrLength(overrides?: CallOverrides): Promise<BigNumber>;

    bitkubNextLevel(overrides?: CallOverrides): Promise<BigNumber>;

    burnKToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    committee(overrides?: CallOverrides): Promise<BigNumber>;

    externalTransfer(
      _token: PromiseOrValue<string>,
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    externalTransferKKUB(
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    externalTransferKKUBToKUB(
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    internalTransfer(
      _token: PromiseOrValue<string>,
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    internalTransferKKUB(
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAllowedAddr(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintKToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeAddress(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdminProjectRouter(
      _adminProjectRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBitkubNextLevel(
      _bitkubNextLevel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCommittee(
      _committee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeTo(
      _feeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKKUB(
      _KKUB: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKYC(
      _KYC: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKYCKKUB(
      _kyc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKYCsLevelKKUB(
      _kycsLevel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawKUB(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    KKUB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KYC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROJECT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAddress(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adminProjectRouter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedAddrByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedAddrByPage(
      _page: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedAddrLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bitkubNextLevel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnKToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    committee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    externalTransfer(
      _token: PromiseOrValue<string>,
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    externalTransferKKUB(
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    externalTransferKKUBToKUB(
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    internalTransfer(
      _token: PromiseOrValue<string>,
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    internalTransferKKUB(
      _feeToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAllowedAddr(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintKToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeAddress(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdminProjectRouter(
      _adminProjectRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBitkubNextLevel(
      _bitkubNextLevel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCommittee(
      _committee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKKUB(
      _KKUB: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKYC(
      _KYC: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKYCKKUB(
      _kyc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKYCsLevelKKUB(
      _kycsLevel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawKUB(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
