/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface EarnRouterInterface extends utils.Interface {
  functions: {
    "PROJECT()": FunctionFragment;
    "adminProjectRouter()": FunctionFragment;
    "deposit(address,address,uint256,address[],uint256[],address)": FunctionFragment;
    "setAdminProjectRouter(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PROJECT"
      | "adminProjectRouter"
      | "deposit"
      | "setAdminProjectRouter"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PROJECT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminProjectRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminProjectRouter",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "PROJECT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminProjectRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAdminProjectRouter",
    data: BytesLike
  ): Result;

  events: {
    "AdminProjectRouterSet(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminProjectRouterSet"): EventFragment;
}

export interface AdminProjectRouterSetEventObject {
  oldAdmin: string;
  newAdmin: string;
  caller: string;
}
export type AdminProjectRouterSetEvent = TypedEvent<
  [string, string, string],
  AdminProjectRouterSetEventObject
>;

export type AdminProjectRouterSetEventFilter =
  TypedEventFilter<AdminProjectRouterSetEvent>;

export interface EarnRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EarnRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PROJECT(overrides?: CallOverrides): Promise<[string]>;

    adminProjectRouter(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      poolAddress: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _rewardAmount: PromiseOrValue<BigNumberish>,
      _nftAddress: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _bitkubNexUser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdminProjectRouter(
      _adminProjectRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PROJECT(overrides?: CallOverrides): Promise<string>;

  adminProjectRouter(overrides?: CallOverrides): Promise<string>;

  deposit(
    poolAddress: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _rewardAmount: PromiseOrValue<BigNumberish>,
    _nftAddress: PromiseOrValue<string>[],
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _bitkubNexUser: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdminProjectRouter(
    _adminProjectRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PROJECT(overrides?: CallOverrides): Promise<string>;

    adminProjectRouter(overrides?: CallOverrides): Promise<string>;

    deposit(
      poolAddress: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _rewardAmount: PromiseOrValue<BigNumberish>,
      _nftAddress: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _bitkubNexUser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdminProjectRouter(
      _adminProjectRouter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminProjectRouterSet(address,address,address)"(
      oldAdmin?: PromiseOrValue<string> | null,
      newAdmin?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): AdminProjectRouterSetEventFilter;
    AdminProjectRouterSet(
      oldAdmin?: PromiseOrValue<string> | null,
      newAdmin?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): AdminProjectRouterSetEventFilter;
  };

  estimateGas: {
    PROJECT(overrides?: CallOverrides): Promise<BigNumber>;

    adminProjectRouter(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      poolAddress: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _rewardAmount: PromiseOrValue<BigNumberish>,
      _nftAddress: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _bitkubNexUser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdminProjectRouter(
      _adminProjectRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PROJECT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminProjectRouter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      poolAddress: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _rewardAmount: PromiseOrValue<BigNumberish>,
      _nftAddress: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _bitkubNexUser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdminProjectRouter(
      _adminProjectRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
